name: "Test"

on:
  workflow_call:
    inputs:
      repository:
        description: "Repository to checkout"
        required: false
        type: string
        default: ${{ github.repository }}

      ref:
        description: "Git ref to checkout"
        required: false
        type: string

      system:
        description: "System to test on"
        required: true
        type: string

      runs-on:
        description: "Runner to use"
        required: true
        type: string

      nixpkgs-input:
        description: "An optional nixpkgs input to test against"
        required: false
        type: string

jobs:
  tests:
    runs-on: ${{ fromJSON(inputs.runs-on) }}

    steps:
      - uses: actions/checkout@v5
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Configure Cachix
        uses: cachix/cachix-action@v16
        with:
          name: devenv
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Build devenv
        run: |
          path=$(nix build -L --print-out-paths)
          echo "$path/bin" >> $GITHUB_PATH

      - name: Test tasks outside shell
        run: devenv tasks run devenv:enterShell

      - name: Build override args
        id: override-args
        env:
          NIXPKGS_INPUT: ${{ inputs.nixpkgs-input }}
        run: |
          override_args=""
          if [ -n "$NIXPKGS_INPUT" ]; then
            override_args="--override-input nixpkgs $NIXPKGS_INPUT"
          fi
          echo "args=$override_args" >> $GITHUB_OUTPUT

      - name: Run devenv-test-cli
        run: devenv ${{ steps.override-args.outputs.args }} shell devenv-test-cli

      - name: Run tests
        run: devenv-run-tests run tests ${{ steps.override-args.outputs.args }}


  direnv:
    name: direnv (${{ inputs.system }})
    runs-on: ${{ fromJSON(inputs.runs-on) }}

    steps:
      - uses: actions/checkout@v5
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Configure Cachix
        uses: cachix/cachix-action@v16
        with:
          name: devenv
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Build devenv
        run: |
          path=$(nix build -L --print-out-paths)
          echo "$path/bin" >> $GITHUB_PATH

      - name: Test direnv
        env:
          NIXPKGS_INPUT: ${{ inputs.nixpkgs-input }}
        run: |
          mkdir -p ~/.config/direnv/
          cat > ~/.config/direnv/direnv.toml << 'EOF'
          [global]
          strict_env = true
          EOF

          args=(--override-input devenv "path:$PWD?dir=src/modules")
          if [ -n "$NIXPKGS_INPUT" ]; then
            args+=(--override-input nixpkgs "$NIXPKGS_INPUT")
          fi

          tmp="$(mktemp -d)"
          pushd "$tmp"
            nix shell nixpkgs#direnv -c devenv "${args[@]}" init
          popd

  fish-zsh:
    name: zsh/fish (${{ inputs.system }})
    runs-on: ${{ fromJSON(inputs.runs-on) }}

    steps:
      - uses: actions/checkout@v5
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Configure Cachix
        uses: cachix/cachix-action@v16
        with:
          name: devenv
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Build devenv
        run: |
          path=$(nix build -L --print-out-paths)
          echo "$path/bin" >> $GITHUB_PATH

      - name: Test devenv in fish and zsh
        run: |
          nix shell nixpkgs#zsh -c zsh -c "devenv version"
          nix shell nixpkgs#fish -c fish -c "devenv version"
